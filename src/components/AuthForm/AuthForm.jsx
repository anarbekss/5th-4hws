import { useForm } from "react-hook-form";
import style from "./AuthForm.module.scss";
import { AuthInp } from "./AuthInp";
import { toast } from "react-toastify";

export const AuthForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm();

  const ExamBtn = (data) => {
    console.log("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", data);
    toast.success("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üéâ", {
      position: "top-right",
      autoClose: 3000,
    });
  };

  const ExamError = (errors) => {
    console.log("–û—à–∏–±–∫–∏:", errors);

    toast.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚ö†Ô∏è", {
      position: "top-right",
      autoClose: 3000,
    });
  };

  const regForEmail = /\w{2,}@\w{2,}\.[a-z]{2,}/;
  const regForPassword = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/;
  const regForName = /^[A-Za-z–ê-–Ø–∞-—è]{2,}$/;

  const fields = [
    {
      name: "email",
      type: "text",
      placeholder: "Email",
      required: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      pattern: { value: regForEmail, message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email" },
    },
    {
      name: "password",
      type: "password",
      placeholder: "–ü–∞—Ä–æ–ª—å",
      required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      pattern: {
        value: regForPassword,
        message:
          "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã",
      },
    },
    {
      name: "name",
      type: "text",
      placeholder: "–ò–º—è",
      required: "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
      pattern: {
        value: regForName,
        message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã",
      },
    },
    {
      name: "confirmPassword",
      type: "password",
      placeholder: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
      required: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
      validate: (value) => value === watch("password") || "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
    },
  ];

  return (
    <div className={style.Background}>

    <form
      className={style.FormBlock}
      onSubmit={handleSubmit(ExamBtn, ExamError)}
    >
      <div style={{marginBottom:30}} className={style.InpBlock}>
        <h2>Authorization</h2>
        {fields.map((field) => (
          <AuthInp
            key={field.name}
            AuthData={field}
            errors={errors}
            register={register}
          />
        ))}
      </div>
      <button type="submit" className={style.AuthCheck}>
        Examination
      </button>
    </form>
    </div>
  );
};
